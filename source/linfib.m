function YC=linfib(T0,T1,phi,a,b,x,y_shift)
%LINFIB
%    YC = LINFIB(T0,T1,A,X)

%    This function was generated by the Symbolic Math Toolbox version 6.0.
%    05-Oct-2014 22:15:29

T0i= T0;
T0 = T0 * (pi/180.);
T1 = T1 * (pi/180.);

x = x-a/2.;

% special case (T0=T1 && T0i=90)
if( T0 == T1 && T0i == 90)
    x(1:length(x))=y_shift;
    YC=linspace(-b/2,b/2);
    return
end

for i=1:length(x) 
%     if( T0 == T1 )
%       YC(i) = x(i)*tan(T0);
%     elseif( x(i) <=(a.*(1.0./2.0) ) && (0.0 <= x(i)) )
%       YC(i)=(a.*(log(cos(T0))-log(cos(T0+(x(i).*(T1-T0).*2.0)./a))).*5.0e-1)./(T1-T0);
%     elseif( (a.*(-1.0./2.0) <= x(i)) && (x(i) <= 0.0) )
%       YC(i)=(a.*(-log(cos(T0))+log(cos(T0-(x(i).*(T1-T0).*2.0)./a))).*5.0e-1)./(T1-T0); 
%     else
%       YC(i)=NaN;
%     end
    
    if( T0 == T1 )
        if(T0i == 90)
            YC(i) = 0;
        else
            YC(i) = x(i)*tan(T0);
        end
        YC(i)= YC(i) + b/2.;
    elseif( 0.0 <= x(i) && x(i) <= a/2. )
        YC(i)= ( 0.5*a/(T1-T0)) * ( log(cos(T0)) - log(cos(T0 + 2.*(T1-T0)*x(i)/a) ) );
        YC(i)= YC(i) + b/2.;
    elseif( -a/2.0 <= x(i) && x(i) <= 0.0 )
        YC(i)= ( 0.5*a/(T1-T0)) * (-log(cos(T0)) + log(cos(T0 - 2.*(T1-T0)*x(i)/a) ) );
        YC(i)= YC(i) + b/2.;
    else
        YC(i)=NaN;
    end

%     if( T0 == T1 )
%       YC(i) = x(i)*tan(T0);
%     elseif( (x(i) <= a/2.0 ) && (0.0 <= x(i) ))
%       YC(i)=(0.5*a/(T1-T0))*( -log( cos( T0 + 2.*(T1-T0)*x(i)/a ) ) + log(cos(T0) ) );
%     elseif( (-a/2.0 <= x(i)) && (x(i) <= 0.0))
%       YC(i)=(0.5*a/(T1-T0))*(  log( cos( T0 + 2.*(T1-T0)*x(i)/a ) ) - log(cos(T0) ) );
%     else
%       YC(i)=NaN;
%     end
    
    YC(i) = YC(i) + y_shift;
    
%     if( YC(i) > b/2 )
%         YC(i) = b/2;
%     elseif( YC(i) < -b/2 )
%         YC(i) = -b/2;
%     end
end
end
